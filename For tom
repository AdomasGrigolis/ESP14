#pragma once
//When importing the QEI library, in QEI.h change Encoding encoding = X2_ENCODING to X4_ENCODING in the constructor
//Use these object in the main code
//TickingEncoder* wheel_left = new TickingEncoder(ENC_2_A_PIN, ENC_2_B_PIN);
//TickingEncoder* wheel_right = new TickingEncoder(ENC_1_A_PIN, ENC_1_B_PIN);
//To get speed for e.g. use wheel_right->get_speed();
#include <QEI.h>
#include <PWMdrive.cpp>

#define WHEEL_CIRCUMFERENCE 251.33f//In mm
#define ENCODER_MEASURE_PERIOD 0.001//Encoder pulses are checked at this periodicity
#define NO_PULS_PER_REV 1024//Pulses per revolution of enc disk (256*4)
#define GAP_LENGTH 10.0f//In mm
#define STOPPED_SPEED 0.0//In mm/s
#define PI 3.1415926f
//Pins
#define ENC_1_A_PIN PB_2
#define ENC_1_B_PIN PB_15
#define ENC_2_A_PIN PB_13
#define ENC_2_B_PIN PB_14

class TickingEncoder : public QEI
{
private:
    Ticker tick_enc;
    Car car;
    volatile int pulses;
    volatile double dx;
    volatile double speed;//mm/s
    volatile double ang_speed;//rad/s
    volatile bool no_line_var;
    volatile bool stopped;
    void enc_isr()
    {
        //Called to fetch encoder data by tick_enc
        pulses = getPulses();//Stores number of pulses
        speed = (((double)pulses/NO_PULS_PER_REV)*(WHEEL_CIRCUMFERENCE))/ENCODER_MEASURE_PERIOD;
        ang_speed = (((double)pulses/NO_PULS_PER_REV)*2*PI)/ENCODER_MEASURE_PERIOD;
        if (pos_dirr()*speed <= STOPPED_SPEED)stopped = true;
        else stopped = false;
        //Detection distance in case of line break
        if (no_line_var == true && stopped == false) {
            dx += ((double)pulses/NO_PULS_PER_REV)*(WHEEL_CIRCUMFERENCE);//In mm
            if (dx >= GAP_LENGTH) {
                car.stop();
                dx = 0.0;
            }
        }
        reset();//Resets the count
    }
public:
    TickingEncoder(PinName channelA, PinName channelB):QEI(channelA, channelB, NC, NO_PULS_PER_REV)
    {
        dx = 0.0;
        no_line_var = false;
        reset();
        tick_enc.attach(callback(this, &TickingEncoder::enc_isr), ENCODER_MEASURE_PERIOD);
    }
    //Selectors
    double get_speed(){return speed;}
    double get_ang_speed(){return ang_speed;}
    int pos_dirr()//1 for positive dirr, 0 for none, and -1 for negative
    {
        if(speed > 0.0)return 1;
        else if (speed == 0.0) return 0;
        else return -1;
    }
/* Distance not used anymore as it's redundant with feedback controls
    double get_dx()
    {
        return dx;
    }
*/
    //Modifiers
    void zero_dx(){dx = 0.0;}
    void no_line(){no_line_var = true;}
    void line()
    {
        no_line_var = false;
        dx = 0.0;
    }
};

PWM
#pragma once
//In main, use Car car; to create an obj
//Then to call functions, use car.XX(); or int integer car->get.XX;
#include "mbed.h"
#define FREQUENCY 10000.0f//Above audible range
#define PERIOD 1.0f/FREQUENCY//Period for PWM signal
//Increments less than 0.01 should not be used under any circumstance
#define STATIONARY_DUTY_CYCLE 1.0f
#define STANDARD_MOVEMENT_SPEED 0.7f//0.7 is found to be suitable for slow cruizing
#define RIGHT_OFFSET 0.03f//This offset allows to balance out left and right 
#define STANDARD_TURNING_SPEED 0.75f
#define ACC_STIFFNESS 0.01f//Acceleration increments, higher the number, faster the change
//Pins
#define ENABLE_PIN PA_13
#define BIPOLAR1_PIN PH_1
#define BIPOLAR2_PIN PH_0
#define DIR_PIN1 PC_14
#define DIR_PIN2 PA_14
#define PWM_PIN1 PB_1
#define PWM_PIN2 PC_8
#define FORWARD 0
#define BACKWARD 1

enum Turn
{
    LEFT, RIGHT
};

class Car
{
private: 
        DigitalOut Enable_Driveboard;
        PwmOut Motor_1;
        PwmOut Motor_2;
        DigitalOut Bipolar_1;
        DigitalOut Bipolar_2;
        DigitalOut Direction_1;
        DigitalOut Direction_2;
        float curr_dc_1;
        float curr_dc_2;
public:
    Car(PinName enable = ENABLE_PIN, PinName pwm1 = PWM_PIN1, PinName pwm2 = PWM_PIN2, 
     PinName bipolar1 = BIPOLAR1_PIN, PinName bipolar2 = BIPOLAR2_PIN, PinName dir1 = DIR_PIN1, PinName dir2 = DIR_PIN2) :
     Enable_Driveboard(enable), Motor_1(pwm1), Motor_2(pwm2),
     Bipolar_1(bipolar1), Bipolar_2(bipolar2), Direction_1(dir1), Direction_2(dir2)
    {   
        Enable_Driveboard = 1;
        Motor_1.period(PERIOD);
        Motor_2.period(PERIOD);
        //Use Unipolar mode
        Bipolar_1 = 0;
        Bipolar_2 = 0;
        //Default direction is forward
        Direction_1 = FORWARD;
        Direction_2 = FORWARD;
        stop();//Init at stall
    }
    void setMotorSpeeds(float duty_cycle_1, float duty_cycle_2)
    {//Main function that writes DC directly to output
        if(duty_cycle_1 >= 0.0f && duty_cycle_1 <= 1.0f){
            Motor_1.write(duty_cycle_1);
            curr_dc_1 = duty_cycle_1;
        }
        if(duty_cycle_2 >= 0.0f && duty_cycle_2 <= 1.0f){
            Motor_2.write(duty_cycle_2);
            curr_dc_2 = duty_cycle_2;
        }
    }
    void changeDutyCycle(float change_left, float change_right)
    {
        float changed_dc_1 = curr_dc_1 + change_left;
        float changed_dc_2 = curr_dc_2 + change_right;
        setMotorSpeeds(changed_dc_1, changed_dc_2);
    }
//Moving linearly    
    void startMovingForward()
    {
        setDirectionForward();
        setMotorSpeeds(STANDARD_MOVEMENT_SPEED, STANDARD_MOVEMENT_SPEED);
    }
    void startMovingBackward()
    {
        setDirectionBackward();
        setMotorSpeeds(STANDARD_MOVEMENT_SPEED, STANDARD_MOVEMENT_SPEED);
    }
    void startMoving()//Direction should be set beforehand or will be forward by default
    {
        setMotorSpeeds(STANDARD_MOVEMENT_SPEED, STANDARD_MOVEMENT_SPEED);
    }
//Setting direction
    void setDirectionForward()
    {
        Direction_1 = FORWARD;
        Direction_2 = FORWARD;
    }
    void setDirectionBackward()
    {
        Direction_1 = BACKWARD;
        Direction_2 = BACKWARD;
    }
//Stopping capabilities
    void stop()
    {
        setMotorSpeeds(STATIONARY_DUTY_CYCLE, STATIONARY_DUTY_CYCLE);
    }
//Turns
    void turnOneWheel(Turn t)//Turns with one wheel stationary
    {
        switch(t){
        case LEFT:
            setMotorSpeeds(STATIONARY_DUTY_CYCLE, STANDARD_MOVEMENT_SPEED);
            Direction_1 = FORWARD;
            break;
        case RIGHT:
            setMotorSpeeds(STANDARD_MOVEMENT_SPEED, STATIONARY_DUTY_CYCLE);
            Direction_2 = FORWARD;
            break;
        }
    }
    void turnaround(Turn t = LEFT)//Turns with both wheels in opposite directions
    {
        switch(t){
        case LEFT:
            Direction_1 = BACKWARD;
            Direction_2 = FORWARD;
            break;
        case RIGHT:
            Direction_1 = FORWARD;
            Direction_2 = BACKWARD;
            break;
        }
        setMotorSpeeds(STANDARD_TURNING_SPEED, STANDARD_TURNING_SPEED);
    }
    float get_curr_dc(Turn t){
        switch(t){
        case LEFT:
            return curr_dc_2;
        case RIGHT:
            return curr_dc_1;
        }
        return -1.0f;
    }
};//End of class definition
POT
//Potentiometer* leftPot = new SamplingPotentiometer(A0, 3.3, 100.0); 
//Potentiometer* rightPot = new SamplingPotentiometer(A1, 3.3, 100.0);
//leftPot->getCurrentSampleNorm(); will return 0-1 normalised value from pot
#include "mbed.h"
#include <math.h> 

class Potentiometer                                 //Begin Potentiometer class definition
{
private:                                            //Private data member declaration
    AnalogIn inputSignal;                           //Declaration of AnalogIn object
    float VDD, currentSampleNorm, currentSampleVolts; //Float variables to speficy the value of VDD and most recent samples

public:                                             // Public declarations
    Potentiometer(PinName pin, float v) : inputSignal(pin), VDD(v) {}   //Constructor - user provided pin name assigned to AnalogIn...
                                                                        //VDD is also provided to determine maximum measurable voltage
    float amplitudeVolts(void)                      //Public member function to measure the amplitude in volts
    {
        return (inputSignal.read()*VDD);            //Scales the 0.0-1.0 value by VDD to read the input in volts
    }
    
    float amplitudeNorm(void)                       //Public member function to measure the normalised amplitude
    {
        return inputSignal.read();                  //Returns the ADC value normalised to range 0.0 - 1.0
    }
    
    void sample(void)                               //Public member function to sample an analogue voltage
    {
        currentSampleNorm = inputSignal.read();       //Stores the current ADC value to the class's data member for normalised values (0.0 - 1.0)
        currentSampleVolts = currentSampleNorm * VDD; //Converts the normalised value to the equivalent voltage (0.0 - 3.3 V) and stores this information
    }
    
    float getCurrentSampleVolts(void)               //Public member function to return the most recent sample from the potentiometer (in volts)
    {
        return currentSampleVolts;                  //Return the contents of the data member currentSampleVolts
    }
    
    float getCurrentSampleNorm(void)                //Public member function to return the most recent sample from the potentiometer (normalised)
    {
        return currentSampleNorm;                   //Return the contents of the data member currentSampleNorm  
    }

};

class SamplingPotentiometer : public Potentiometer {
    private:
        float samplingFrequency, samplingPeriod;
        Ticker sampler;
    public:
        SamplingPotentiometer(PinName p, float v, float fs): Potentiometer(p, v), samplingFrequency(fs){
        samplingPeriod = 1/samplingFrequency;
        sampler.attach(callback(this, &SamplingPotentiometer::sample), samplingPeriod);
        }
};
